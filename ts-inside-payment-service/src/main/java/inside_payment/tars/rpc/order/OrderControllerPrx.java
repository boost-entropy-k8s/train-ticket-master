// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package inside_payment.tars.rpc.order;

import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.annotation.*;
import com.qq.tars.common.support.Holder;

@Servant
public interface OrderControllerPrx {

	public String home();

	public String home(@TarsContext java.util.Map<String, String> ctx);

	public void async_home(@TarsCallback OrderControllerPrxCallback callback);

	public void async_home(@TarsCallback OrderControllerPrxCallback callback, @TarsContext java.util.Map<String, String> ctx);

	public Response getTicketListByDateAndTripId(SeatTars seatRequest, @TarsHolder Holder<LeftTicketInfoTars> leftTicketInfoTarsOut);

	public Response getTicketListByDateAndTripId(SeatTars seatRequest, @TarsHolder Holder<LeftTicketInfoTars> leftTicketInfoTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_getTicketListByDateAndTripId(@TarsCallback OrderControllerPrxCallback callback, SeatTars seatRequest);

	public void async_getTicketListByDateAndTripId(@TarsCallback OrderControllerPrxCallback callback, SeatTars seatRequest, @TarsContext java.util.Map<String, String> ctx);

	public Response createNewOrder(OrderTars createOrder, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response createNewOrder(OrderTars createOrder, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_createNewOrder(@TarsCallback OrderControllerPrxCallback callback, OrderTars createOrder);

	public void async_createNewOrder(@TarsCallback OrderControllerPrxCallback callback, OrderTars createOrder, @TarsContext java.util.Map<String, String> ctx);

	public Response addcreateNewOrder(OrderTars order, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response addcreateNewOrder(OrderTars order, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_addcreateNewOrder(@TarsCallback OrderControllerPrxCallback callback, OrderTars order);

	public void async_addcreateNewOrder(@TarsCallback OrderControllerPrxCallback callback, OrderTars order, @TarsContext java.util.Map<String, String> ctx);

	public Response queryOrders(OrderInfoTars qi, @TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut);

	public Response queryOrders(OrderInfoTars qi, @TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_queryOrders(@TarsCallback OrderControllerPrxCallback callback, OrderInfoTars qi);

	public void async_queryOrders(@TarsCallback OrderControllerPrxCallback callback, OrderInfoTars qi, @TarsContext java.util.Map<String, String> ctx);

	public Response queryOrdersForRefresh(OrderInfoTars qi, @TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut);

	public Response queryOrdersForRefresh(OrderInfoTars qi, @TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_queryOrdersForRefresh(@TarsCallback OrderControllerPrxCallback callback, OrderInfoTars qi);

	public void async_queryOrdersForRefresh(@TarsCallback OrderControllerPrxCallback callback, OrderInfoTars qi, @TarsContext java.util.Map<String, String> ctx);

	public Response calculateSoldTicket(long travelDate, String trainNumber, @TarsHolder Holder<SoldTicketTars> soldTicketTarsOut);

	public Response calculateSoldTicket(long travelDate, String trainNumber, @TarsHolder Holder<SoldTicketTars> soldTicketTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_calculateSoldTicket(@TarsCallback OrderControllerPrxCallback callback, long travelDate, String trainNumber);

	public void async_calculateSoldTicket(@TarsCallback OrderControllerPrxCallback callback, long travelDate, String trainNumber, @TarsContext java.util.Map<String, String> ctx);

	public Response getOrderPrice(String orderId, @TarsHolder Holder<String> priceOut);

	public Response getOrderPrice(String orderId, @TarsHolder Holder<String> priceOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_getOrderPrice(@TarsCallback OrderControllerPrxCallback callback, String orderId);

	public void async_getOrderPrice(@TarsCallback OrderControllerPrxCallback callback, String orderId, @TarsContext java.util.Map<String, String> ctx);

	public Response payOrder(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response payOrder(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_payOrder(@TarsCallback OrderControllerPrxCallback callback, String orderId);

	public void async_payOrder(@TarsCallback OrderControllerPrxCallback callback, String orderId, @TarsContext java.util.Map<String, String> ctx);

	public Response getOrderById(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response getOrderById(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_getOrderById(@TarsCallback OrderControllerPrxCallback callback, String orderId);

	public void async_getOrderById(@TarsCallback OrderControllerPrxCallback callback, String orderId, @TarsContext java.util.Map<String, String> ctx);

	public Response modifyOrder(String orderId, int status, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response modifyOrder(String orderId, int status, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_modifyOrder(@TarsCallback OrderControllerPrxCallback callback, String orderId, int status);

	public void async_modifyOrder(@TarsCallback OrderControllerPrxCallback callback, String orderId, int status, @TarsContext java.util.Map<String, String> ctx);

	public Response securityInfoCheck(long checkDate, String accountId, @TarsHolder Holder<OrderSecurityTars> orderSecurityTarsOut);

	public Response securityInfoCheck(long checkDate, String accountId, @TarsHolder Holder<OrderSecurityTars> orderSecurityTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_securityInfoCheck(@TarsCallback OrderControllerPrxCallback callback, long checkDate, String accountId);

	public void async_securityInfoCheck(@TarsCallback OrderControllerPrxCallback callback, long checkDate, String accountId, @TarsContext java.util.Map<String, String> ctx);

	public Response saveOrderInfo(OrderTars orderInfo, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response saveOrderInfo(OrderTars orderInfo, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_saveOrderInfo(@TarsCallback OrderControllerPrxCallback callback, OrderTars orderInfo);

	public void async_saveOrderInfo(@TarsCallback OrderControllerPrxCallback callback, OrderTars orderInfo, @TarsContext java.util.Map<String, String> ctx);

	public Response updateOrder(OrderTars order, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response updateOrder(OrderTars order, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_updateOrder(@TarsCallback OrderControllerPrxCallback callback, OrderTars order);

	public void async_updateOrder(@TarsCallback OrderControllerPrxCallback callback, OrderTars order, @TarsContext java.util.Map<String, String> ctx);

	public Response deleteOrder(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response deleteOrder(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_deleteOrder(@TarsCallback OrderControllerPrxCallback callback, String orderId);

	public void async_deleteOrder(@TarsCallback OrderControllerPrxCallback callback, String orderId, @TarsContext java.util.Map<String, String> ctx);

	public Response findAllOrder(@TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut);

	public Response findAllOrder(@TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut, @TarsContext java.util.Map<String, String> ctx);

	public void async_findAllOrder(@TarsCallback OrderControllerPrxCallback callback);

	public void async_findAllOrder(@TarsCallback OrderControllerPrxCallback callback, @TarsContext java.util.Map<String, String> ctx);
}
