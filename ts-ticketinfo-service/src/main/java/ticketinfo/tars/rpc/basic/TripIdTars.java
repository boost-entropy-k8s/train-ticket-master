// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package ticketinfo.tars.rpc.basic;

import com.qq.tars.protocol.util.*;
import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.*;
import com.qq.tars.protocol.tars.annotation.*;

@TarsStruct
public class TripIdTars {

	@TarsStructProperty(order = 0, isRequire = false)
	public TypeTars type = null;
	@TarsStructProperty(order = 1, isRequire = false)
	public String number = "";

	public TypeTars getType() {
		return type;
	}

	public void setType(TypeTars type) {
		this.type = type;
	}

	public String getNumber() {
		return number;
	}

	public void setNumber(String number) {
		this.number = number;
	}

	public TripIdTars() {
	}

	public TripIdTars(TypeTars type, String number) {
		this.type = type;
		this.number = number;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + TarsUtil.hashCode(type);
		result = prime * result + TarsUtil.hashCode(number);
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (!(obj instanceof TripIdTars)) {
			return false;
		}
		TripIdTars other = (TripIdTars) obj;
		return (
			TarsUtil.equals(type, other.type) &&
			TarsUtil.equals(number, other.number) 
		);
	}

	public void writeTo(TarsOutputStream _os) {
		if (null != type) {
			_os.write(type, 0);
		}
		if (null != number) {
			_os.write(number, 1);
		}
	}

	static TypeTars cache_type;
	static { 
		cache_type = new TypeTars();
	}

	public void readFrom(TarsInputStream _is) {
		this.type = (TypeTars) _is.read(cache_type, 0, false);
		this.number = _is.readString(1, false);
	}

}
