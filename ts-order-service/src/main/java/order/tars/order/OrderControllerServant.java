// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

package order.tars.order;

import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.annotation.*;
import com.qq.tars.common.support.Holder;

@Servant
public interface OrderControllerServant {

	public String home();

	public Response getTicketListByDateAndTripId(SeatTars seatRequest, @TarsHolder Holder<LeftTicketInfoTars> leftTicketInfoTarsOut);

	public Response createNewOrder(OrderTars createOrder, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response addcreateNewOrder(OrderTars order, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response queryOrders(OrderInfoTars qi, @TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut);

	public Response queryOrdersForRefresh(OrderInfoTars qi, @TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut);

	public Response calculateSoldTicket(long travelDate, String trainNumber, @TarsHolder Holder<SoldTicketTars> soldTicketTarsOut);

	public Response getOrderPrice(String orderId, @TarsHolder Holder<String> priceOut);

	public Response payOrder(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response getOrderById(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response modifyOrder(String orderId, int status, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response securityInfoCheck(long checkDate, String accountId, @TarsHolder Holder<OrderSecurityTars> orderSecurityTarsOut);

	public Response saveOrderInfo(OrderTars orderInfo, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response updateOrder(OrderTars order, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response deleteOrder(String orderId, @TarsHolder Holder<OrderTars> orderTarsOut);

	public Response findAllOrder(@TarsHolder Holder<java.util.List<OrderTars>> orderTarsListOut);
}
